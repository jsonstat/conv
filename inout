var
	fs=require("fs"),
	rw=require("rw"),
	JSONstat=require("jsonstat-toolkit"),

	dataset=function(contents){
		var json;

		try{
			json=JSON.parse(contents);
		}catch (e){
			console.error("Error: The input does not containt JSON.");
			process.exit(1);
		}

		var j=JSONstat(json);

		if(j.length===0 ||
			(
				j.class!=="dataset" &&
				j.class!=="collection" &&
				j.class!=="bundle"
			)
		){
			console.error("Error: The input does not containt JSON-stat.");
			process.exit(1);
		}

		var
			ds=(j.class==="dataset") ? j : j.Dataset(0),
			i=ds.length,
			len=1
		;

		for(; i--;){
			len*=ds.Dimension(i).length;
		}

		if(len!==ds.n){
			console.error("Error: The input does not containt valid JSON-stat.");
			process.exit(1);
		}

		return ds;
	},

	main=function(argv, callback, isString, outBinary, inBinary){
		var
			outcoding=outBinary ? null : "utf8",
			incoding=inBinary ? null : "utf8"
		;

		if(!argv.stream){
			if(argv._.length<2){
				console.error("Error: When --stream is not enabled you must specify two filenames.");
				process.exit(1);
			}
			//arguments
			var
				result,
				input=argv._[0],
				out=function(output, content, big){
					if(fs.existsSync(output)){
						console.log("Warning: " + output + " already exists.");

						var d=new Date();
						output+="-" + d.toJSON().replace(/-|:|\.|T|Z/g, "");

						if(fs.existsSync(output)){
							console.error("Error: Tried" + output + " but it already exists too. Run again.");
							process.exit(1);
						}

						console.log("Warning: Using " + output + " instead.");
					}

					//So far, only in the non-stream interface...
					if(big && Array.isArray(content)){
						var
							len=content.length,
							half=Math.ceil(len/2),
							first=content.slice(0, half),
							second=content.slice(half-len)
						;

						fs.writeFileSync(output, first.join("\n")+"\n", { flag: "a+" });
						fs.writeFileSync(output, second.join("\n")+"\n", { flag: "a+" });
					}else{
						if(fs.writeFileSync(output, content, outcoding)===false){
							console.error("Error: Couldn't create " + output + ".");
							process.exit(1);
						}
					}

					console.log("Success: " + output + " has been created.");
					process.exit(0);
				}
			;

			if(!fs.existsSync(input)){
				console.error("Error: " + input + " does not exist.");
				process.exit(1);
			}

			if(outBinary){//2arrow
				result=callback( fs.readFileSync(input, incoding) );
				out(argv._[1], result);
			}else{
				result=(isString) ?
					callback( fs.readFileSync(input, incoding) )
					:
					JSON.stringify( callback( fs.readFileSync(input, incoding) ) )
				;

				out(argv._[1], result, !argv.stream && argv.big);
			}

		}else{ //streams

			if(argv._.length>1){
				console.error("Error: With --stream enabled no input/output filename can be specified.");
				process.exit(1);
			}

			if(outBinary){
				isString=true; //Is not really a string but it's not an object that should be stringified either
			}

			rw.readFile("/dev/stdin", incoding, function(error, contents){
				rw.writeFile("/dev/stdout",
					(isString) ?
						callback(contents)
						:
						JSON.stringify( callback(contents) ),
					outcoding,
					function(err){
						process.exit( +(err===null) );
					}
				);
			});
		}
	}
;

module.exports.dataset=dataset;
module.exports.main=main;
